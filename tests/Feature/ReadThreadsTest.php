<?php

namespace Tests\Feature;

use function array_column;
use function create;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ReadThreadsTest extends TestCase
{
    /**
     * A basic test example.
     *
     * @return void
     */
    use DatabaseMigrations;
    use DatabaseTransactions;

    private $thread;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->thread = factory('App\Thread')->create();
    }


    /** @test */
    public function a_user_can_browse_all_threads()
    {
        $response = $this->get('/threads');
        $response->assertSee($this->thread->title);
    }


    /** @test */
    public function a_user_can_browse_a_thread()
    {
        $response = $this->get($this->thread->path());
        $response->assertSee($this->thread->title);
    }

    /** @test */
    public function a_user_can_read_replies_of_a_thread()
    {

        $reply = factory('App\Reply')->create(['thread_id' => $this->thread->id]);
        $response = $this->get($this->thread->path());
        $response->assertSee($reply->body);
    }

    /** @test */
    public function a_user_can_filter_threads_according_to_a_channel()
    {
        $channel= create('App\Channel');
        $threadInChannel = create('App\Thread',['channel_id'=>$channel->id]);
        $threadNotInChannel=create('App\Thread');

        $this->get('/threads/' . $channel->slug)
            ->assertSee($threadInChannel->title)
            ->assertDontSee($threadNotInChannel->title);
    }

    /** @test */
    public function a_user_can_filter_threads_by_any_username(){
        $this->withExceptionHandling()->be(factory('App\User')->create(['name'=>'nishi']));
       $threadByNishi= create('App\Thread',['user_id'=>auth()->id()]);
       $threadNotByNishi = create('App\Thread');

       $this->get('threads?by=nishi')
       ->assertSee($threadByNishi->title)
       ->assertDontSee($threadNotByNishi->title);

    }

    /** @test */
    public function a_user_can_filter_threads_by_popularity(){

        $threadsTwoReply=create('App\Thread');
        create('App\Reply',['thread_id'=>$threadsTwoReply->id],2);

        $threadsThreeReply=create('App\Thread');
        create('App\Reply',['thread_id'=>$threadsThreeReply->id],3);

        $threadsNoReply=$this->thread;
//        create('App\Reply',['thread_id'=>$threadsNoReply->id],2);


        $response = $this->getJson('threads?popular=1')->json();

        $this->assertEquals([3,2,0],array_column($response,'replies_count'));
    }

}
